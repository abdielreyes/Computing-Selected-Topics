import pygame

class Game:
    width, height = 70,70    
    live = 1
    dead = 0

    color_live = (255,255,255)
    color_dead = (0,0,0)

    world = []
    new_world = []

    born = []
    alive = []

    cell_size = 10
    iterations = 0

    offset_x = 0
    offset_y = 0

    def __init__(self,pattern: str = "23/3"):
        self.init_map()
        self.alive = [int(v) for v in pattern.split("/")[0]]
        self.born = [int(v) for v in pattern.split("/")[1]]
    @property
    def get_height(self)->int:
        return self.height
    @property
    def get_width(self)->int:
        return self.width
    @property
    def get_iterations(self)->int:
        return self.iterations
    @property
    def get_live_cells(self)->int:
        return self.world.count(1)
    @property
    def get_cell_size(self)->int:
        return self.cell_size
    @property
    def get_offset_x(self)->int:
        return self.offset_x
    @property
    def get_offset_y(self)->int:
        return self.offset_y

    def set_size(self,a:int,b:int):
        self.width = a
        self.height = b
    def set_offset_y(self,value:int):
        self.offset_y = value
    def set_offset_x(self,value:int):
        self.offset_x = value
    def set_cell_size(self,value:int):
        self.cell_size = value
    def set_color(self,live:tuple,dead:tuple):
        self.color_live = live
        self.color_dead = dead

    def init_map(self):
        self.iterations = 0
        self.world = [0] * (self.width * self.height)
        self.new_world =  [0] * (self.width * self.height)
        self.offset_x = 0
        self.offset_y = 0

    def get_cell_value(self,x: int, y :int)->int:
        if x >= self.width:
            x -= self.width
        elif x < 0:
            x += self.width
        if y >= self.height:
            y -= self.height
        elif y < 0:
            y += self.height
        return self.world[(y * self.width) + x]
    def set_cell_value(self,x:int,y:int, value:int)->int:
        self.world[(y * self.width)+x] = value
    
    def update(self)->None:
        self.iterations += 1
        for y in range (self.height):
            for x in range (self.width):
                neighbors = [
                    self.get_cell_value(x + 1, y - 1),
                    self.get_cell_value(x , y - 1),
                    self.get_cell_value(x - 1, y - 1),
                    self.get_cell_value(x - 1, y),
                    self.get_cell_value(x + 1, y),
                    self.get_cell_value(x - 1, y + 1),
                    self.get_cell_value(x , y + 1),
                    self.get_cell_value(x + 1, y + 1),
                ]
                alive_count = neighbors.count(self.live)
                current = self.get_cell_value(x,y)
                if current == self.live:
                    if alive_count not in self.alive:
                        current = self.dead
                else:
                    if alive_count in self.born:
                        current = self.live
                self.new_world[(y * self.width) + x] = current

        for i in range (self.width * self.height):
            self.world[i] = self.new_world[i]

    def draw (self, context: pygame.Surface)->None:
        cell_size = self.cell_size
        ox = self.offset_x
        oy = self.offset_y
        for y in range (self.height):
            for x in range (self.width):
                current = self.get_cell_value(x,y)
                if current == self.live:
                    pygame.draw.rect(
                        surface=context,
                        color=self.color_live, 
                        rect=(x * cell_size + ox, y * cell_size  + oy , cell_size, cell_size))
                else:
                    pygame.draw.rect(
                        surface=context,
                        color=self.color_dead,
                        rect=(x * cell_size + ox, y * cell_size  + oy , cell_size, cell_size))
                        

    def save_file(self, filename: str = "state.txt")->None:
        with open(filename, mode="w", encoding="utf-8") as fp:
            fp.write(str(self.world))

    def load_file(self, filename: str = "state.txt")->None:
        with open(filename, mode="r", encoding="utf-8") as fp:
            data = fp.read()[1:-1]
            self.world = [int(v) for v in data.split(",")]
                    